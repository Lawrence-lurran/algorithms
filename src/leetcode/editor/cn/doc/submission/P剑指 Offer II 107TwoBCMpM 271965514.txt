class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int[][] distance=new int[mat.length][mat[0].length];
        for (int i = 0; i < mat.length; i++) {
            for (int j = 0; j < mat[0].length; j++) {
                if (mat[i][j]!=0){
                    Queue<int[]> queue=new LinkedList<>();
                    queue.offer(new int[]{i,j});
                    int depth=-1;
                    boolean flag=false;
                    while (!queue.isEmpty()){
                        int queueSize=queue.size();
                        depth++;
                        for (int z = 0; z < queueSize; z++) {
                            int[] node=queue.poll();
                            int curI=node[0];
                            int curJ=node[1];
//                            if (curI<0 || curI>mat.length-1 || curJ<0 || curJ> mat.length-1){
//                                continue;
//                            }
                            if (mat[curI][curJ]==0){
                                flag=true;
                                distance[i][j]=depth;
                                break;
                            }
                            if (curI>0){
                                queue.offer(new int[]{curI-1,curJ});
                            }
                            if (curI< mat.length-1){
                                queue.offer(new int[]{curI+1,curJ});
                            }
                            if (curJ>0){
                                queue.offer(new int[]{curI,curJ-1});
                            }
                            if (curJ< mat[0].length-1){
                                queue.offer(new int[]{curI,curJ+1});
                            }
                        }
                        if (flag){
                            break;
                        }
                    }

                }
            }
        }
        return distance;
    }
}

//runtime:N/A
//memory:N/A
//total_testcases:49
//total_correct:48
//input_formatted:[[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[0,0,0]]
//expected_output:[[19,19,19],[18,18,18],[17,17,17],[16,16,16],[15,15,15],[14,14,14],[13,13,13],[12,12,12],[11,11,11],[10,10,10],[9,9,9],[8,8,8],[7,7,7],[6,6,6],[5,5,5],[4,4,4],[3,3,3],[2,2,2],[1,1,1],[0,0,0]]
//code_output:
//runtime_error:
//last_testcase:[[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[0,0,0]]
